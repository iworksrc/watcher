//@use 'styles/itorum-palette' as itorum;
//
//// Custom Theming for Angular Material
//// For more information: https://material.angular.io/guide/theming
//@use '@angular/material' as mat;
//// Plus imports for other components in your app.
//
//// Include the common styles for Angular Material. We include this here so that you only
//// have to load a single css file for Angular Material in your app.
//// Be sure that you only ever include this mixin once!
//@include mat.core();
//
//// Define the palettes for your theme using the Material Design palettes available in palette.scss
//// (imported above). For each palette, you can optionally specify a default, lighter, and darker
//// hue. Available color palettes: https://material.io/design/color/
//
////$watcher-primary: mat.define-palette(mat.$light-green-palette);
//$watcher-primary: mat.define-palette(itorum.$itorum-green-palette);
//$watcher-accent: mat.define-palette(mat.$pink-palette, A200, A100, A400);
//
//// The warn palette is optional (defaults to red).
//$watcher-warn: mat.define-palette(mat.$red-palette);
//
//// Create the theme object. A theme consists of configurations for individual
//// theming systems such as "color" or "typography".
//$watcher-theme: mat.define-light-theme((
//  color: (
//    primary: $watcher-primary,
//    accent: $watcher-accent,
//    warn: $watcher-warn,
//  )
//));
//
//// Include theme styles for core and each component used in your app.
//// Alternatively, you can import and @include the theme mixins for each component
//// that you are using.
//@include mat.all-component-themes($watcher-theme);
//
//.alter-theme {
//  $alter-primary: mat.define-palette(mat.$light-blue-palette);
//  $alter-accent: mat.define-palette(mat.$yellow-palette, 400);
//  $alter-theme: mat.define-light-theme((
//    color: (
//      primary: $alter-primary,
//      accent: $alter-accent
//    )
//  ));
//  @include mat.all-component-themes($alter-theme);
//}

@use '@angular/material' as mat;
// import Material Theme Creator ngx-module
@use "material-theme-creator/ngx-mtc" as ngx-mtc;

@import '@angular/material/theming';


@import "theme-maps"; // Important: see this file!

@include mat.core();

// Init Material Theme Creator ngx-module
@include ngx-mtc.init();

// Create theme map (variables without colors)
$primary-palette: mat.define-palette($primary-map);
$accent-palette: mat.define-palette($accent-map);
$warn-palette: mat.define-palette($warn-map);

//$accent-palette: mat.define-palette(mat.$grey-palette, A200, A100, A400);
//$warn-palette: mat.define-palette(mat.$red-palette);

// Custom theme
$theme: ngx-mtc.custom-theme(
    $primary-palette,
    $accent-palette,
    $warn-palette,
);

@include mat.all-component-themes($theme);

.alter-theme {
  $alter-primary: mat.define-palette(mat.$light-blue-palette);
  $alter-accent: mat.define-palette(mat.$yellow-palette, 400);
  $alter-theme: mat.define-light-theme((
    color: (
      primary: $alter-primary,
      accent: $alter-accent
    )
  ));
  @include mat.all-component-colors($alter-theme);
}

// init theme type
@media (prefers-color-scheme: dark) {
  :root {
    --is-dark-theme: 1;
  }
}

@media (prefers-color-scheme: light) {
  :root {
    --is-dark-theme: 0;
  }
}

//@function color($color-name) {
//  @return var(--#{$color-name}-color);
//}
//
//$primary-color = color(primary);

:root {
  @include ngx-mtc.theme-base(); // init theme base (light/dark)
  @include ngx-mtc.create-variables-from-color('primary', #50aa50, 50%); // create theme from color
  @include ngx-mtc.create-variables-from-color('accent', #b5a53f, 50%); // create theme from color
  @include ngx-mtc.create-variables-from-color('warn', #b53f74, 50%); // create theme from color
}


// Use
html, body {
  height: 100%;
  margin: 0;
  font-family: Roboto, "Helvetica Neue", sans-serif;
  background: map-get(map-get($theme, background), background);
  color: map-get(map-get($theme, foreground), text);
}
